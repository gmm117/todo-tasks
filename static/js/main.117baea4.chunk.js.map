{"version":3,"sources":["components/storage/TodoStorageContext.tsx","components/TodoTemplate.tsx","components/TodoHead.tsx","components/TodoItem.tsx","components/TodoList.tsx","components/TodoCreate.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["initialTodos","id","text","done","todoReducer","state","action","type","concat","todo","map","filter","TodoStateContext","createContext","TodoDispatchContext","TodoNextIdContext","TodoProvider","children","useReducer","dispatch","nextId","useRef","Provider","value","useTodoState","context","useContext","Error","useTodoDispatch","TodoTemplateBlock","styled","div","TodoTemplate","TodoHeadBlock","TodoHead","undoneTasks","dateString","Date","toLocaleDateString","year","month","day","className","format","ticking","timezone","length","CheckCircle","props","css","Text","Remove","TodoItemBlock","React","memo","onClick","TodoListBlock","TodoList","todos","key","CircleButton","button","open","InsertFormPositioner","InsertForm","form","Input","input","useState","setOpen","setValue","useTodoNextId","onSubmit","e","preventDefault","current","placeholder","autoFocus","onChange","target","GlobalStyle","createGlobalStyle","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yPAQMA,EAAe,CACjB,CACIC,GAAI,EACJC,KAAM,4CACNC,MAAM,IASd,SAASC,EAAYC,EAAsBC,GACvC,OAAOA,EAAOC,MACV,IAAK,SACD,OAAOF,EAAMG,OAAOF,EAAOG,MAC/B,IAAK,SACD,OAAOJ,EAAMK,KACT,SAAAD,GAAI,OAAIA,EAAKR,KAAOK,EAAOL,GAAnB,eAA6BQ,EAA7B,CAAmCN,MAAOM,EAAKN,OAAQM,KAEvE,IAAK,SACD,OAAOJ,EAAMM,QAAO,SAAAF,GAAI,OAAIA,EAAKR,KAAOK,EAAOL,MACnD,QACI,OAAOI,GAInB,IAAMO,EAAmBC,wBAAmC,MACtDC,EAAsBD,wBAAuC,MAC7DE,EAAoBF,wBAAqD,MAMxE,SAASG,EAAT,GAA2D,IAAlCC,EAAiC,EAAjCA,SAAiC,EACnCC,qBAAWd,EAAaJ,GADW,mBACtDK,EADsD,KAC/Cc,EAD+C,KAEvDC,EAASC,iBAAO,GACtB,OACI,kBAACT,EAAiBU,SAAlB,CAA2BC,MAAOlB,GAC9B,kBAACS,EAAoBQ,SAArB,CAA8BC,MAAOJ,GACjC,kBAACJ,EAAkBO,SAAnB,CAA4BC,MAAOH,GAC9BH,KAOd,SAASO,IACZ,IAAMC,EAAUC,qBAAWd,GAC3B,IAAIa,EACA,MAAM,IAAIE,MAAM,4BAEpB,OAAOF,EAGJ,SAASG,IACZ,IAAMH,EAAUC,qBAAWZ,GAC3B,IAAIW,EACA,MAAM,IAAIE,MAAM,4BAEpB,OAAOF,E,+WCpEX,IAAMI,EAAoBC,IAAOC,IAAV,KA2BRC,MANf,YAA2D,IAAlCf,EAAiC,EAAjCA,SACrB,OACI,kBAACY,EAAD,KAAoBZ,I,qeCrB5B,IAAMgB,EAAgBH,IAAOC,IAAV,KAgDJG,MAxBf,WACI,IACMC,EADQX,IACYb,QAAO,SAAAF,GAAI,OAAKA,EAAKN,QAGzCiC,GADQ,IAAIC,MACOC,mBAAmB,QAAS,CACjDC,KAAM,UACNC,MAAO,OACPC,IAAK,YAGT,OACI,kBAACR,EAAD,KACI,4BAAKG,GACL,yBAAKM,UAAU,OAEV,kBAAC,IAAD,CAAOC,OAAQ,iBAAkBC,SAAS,EAAMC,SAAU,gBAG/D,yBAAKH,UAAU,aAAf,iBAAgCP,EAAYW,OAA5C,yB,0sCC1CZ,IAAMC,EAAcjB,IAAOC,IAAV,KAWX,SAAAiB,GAAK,OACLA,EAAM7C,MACN8C,YADA,QAQAC,EAAOpB,IAAOC,IAAV,KAIJ,SAAAiB,GAAK,OACHA,EAAM7C,MACN8C,YADA,QAMFE,EAASrB,IAAOC,IAAV,KAcNqB,EAAgBtB,IAAOC,IAAV,IAMToB,GAsCKE,UAAMC,MAzBrB,YAAyD,IAApCrD,EAAmC,EAAnCA,GAAIE,EAA+B,EAA/BA,KAAMD,EAAyB,EAAzBA,KACrBiB,EAAWS,IAWjB,OACI,kBAACwB,EAAD,KACQ,kBAACL,EAAD,CAAa5C,KAAMA,EAAMoD,QAZpB,kBACbpC,EAAS,CACLZ,KAAM,SACNN,SAUSE,GAAQ,kBAAC,IAAD,OAEb,kBAAC+C,EAAD,CAAM/C,KAAMA,GAAOD,GACnB,kBAACiD,EAAD,CAAQI,QAXH,kBACbpC,EAAS,CACLZ,KAAM,SACNN,SASQ,kBAAC,IAAD,W,wJCpFpB,IAAMuD,EAAgB1B,IAAOC,IAAV,KA+BJ0B,MApBf,YAAkD,EAA7BxC,SAA8B,IACzCyC,EAAQlC,IAEd,OACI,kBAACgC,EAAD,KAEME,EAAMhD,KACJ,SAAAD,GAAI,OAAI,kBAAC,EAAD,CACLkD,IAAKlD,EAAKR,GACVA,GAAIQ,EAAKR,GACTC,KAAMO,EAAKP,KACXC,KAAMM,EAAKN,Y,i7CCtB9B,IAAMyD,EAAe9B,IAAO+B,OAAV,KA8Bd,SAAAb,GAAK,OAAIA,EAAMc,MAAQb,YAAd,QAaPc,EAAuBjC,IAAOC,IAAV,KAOpBiC,EAAalC,IAAOmC,KAAV,KASVC,EAAQpC,IAAOqC,MAAV,KA0DId,UAAMC,MA3CrB,YAAsD,EAA/BrC,SAAgC,IAAD,EAC1BmD,oBAAkB,GADQ,mBAC3CN,EAD2C,KACrCO,EADqC,OAExBD,mBAAiB,IAFO,mBAE3C7C,EAF2C,KAEpC+C,EAFoC,KAoB5CnD,EAAWS,IACXR,EL1BH,WACH,IAAMK,EAAUC,qBAAWX,GAC3B,IAAIU,EACA,MAAM,IAAIE,MAAM,4BAEpB,OAAOF,EKqBQ8C,GAEf,OACI,oCACKT,GACG,kBAACC,EAAD,KACI,kBAACC,EAAD,CAAYQ,SAtBX,SAACC,GACdA,EAAEC,iBACFvD,EAAS,CACLZ,KAAM,SACNE,KAAM,CACFR,GAAImB,EAAOuD,QACXzE,KAAMqB,EACNpB,MAAM,KAGdmE,EAAS,IACTD,GAAQ,GACRjD,EAAOuD,SAAW,IAWF,kBAACT,EAAD,CACAU,YAAY,gFACZC,WAAS,EACTC,SA3BH,SAACL,GAAD,OAA6CH,EAASG,EAAEM,OAAOxD,QA4B5DA,MAAOA,MAInB,kBAACqC,EAAD,CAAcL,QAjCL,kBAAMc,GAASP,IAiCSA,KAAMA,GACnC,kBAAC,IAAD,W,iHC3GhB,IAAMkB,EAAcC,YAAH,KAmBFC,OAbf,WACE,OACE,kBAAClE,EAAD,KACE,kBAACgE,EAAD,MACA,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCVYG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.117baea4.chunk.js","sourcesContent":["import React, { useReducer, createContext, useRef, useContext, Dispatch } from 'react';\r\n\r\ntype State = {\r\n    id : number;\r\n    text : string;\r\n    done : boolean;\r\n};\r\n\r\nconst initialTodos = [\r\n    {\r\n        id: 1,\r\n        text: 'JIRA 이슈확인하기',\r\n        done: false\r\n    }\r\n];\r\n\r\ntype Action = \r\n    | { type : 'CREATE'; todo: State; }\r\n    | { type : 'TOGGLE'; id: number; }\r\n    | { type : 'REMOVE'; id: number; }\r\n\r\nfunction todoReducer(state : Array<State>, action : Action) : Array<State> {\r\n    switch(action.type) {\r\n        case 'CREATE':\r\n            return state.concat(action.todo);\r\n        case 'TOGGLE':\r\n            return state.map(\r\n                todo => todo.id === action.id ? { ...todo, done: !todo.done} : todo\r\n            );\r\n        case 'REMOVE':\r\n            return state.filter(todo => todo.id !== action.id);\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst TodoStateContext = createContext<Array<State> | null>(null);\r\nconst TodoDispatchContext = createContext<Dispatch<Action> | null>(null);\r\nconst TodoNextIdContext = createContext<React.MutableRefObject<number> | null>(null);\r\n\r\ntype TodoProviderProps = {\r\n    children : React.ReactNode;\r\n}\r\n\r\nexport function TodoProvider( { children } : TodoProviderProps ) {\r\n    const [state, dispatch] = useReducer(todoReducer, initialTodos);\r\n    const nextId = useRef(5);\r\n    return (\r\n        <TodoStateContext.Provider value={state}>\r\n            <TodoDispatchContext.Provider value={dispatch}>\r\n                <TodoNextIdContext.Provider value={nextId}> \r\n                    {children}\r\n                </TodoNextIdContext.Provider>\r\n            </TodoDispatchContext.Provider>\r\n        </TodoStateContext.Provider>\r\n    );\r\n};\r\n\r\nexport function useTodoState() {\r\n    const context = useContext(TodoStateContext);\r\n    if(!context) {\r\n        throw new Error('connot find todoProvider');\r\n    }\r\n    return context;\r\n}\r\n\r\nexport function useTodoDispatch() {\r\n    const context = useContext(TodoDispatchContext);\r\n    if(!context) {\r\n        throw new Error('connot find todoProvider');\r\n    }\r\n    return context;\r\n}\r\n\r\nexport function useTodoNextId() {\r\n    const context = useContext(TodoNextIdContext);\r\n    if(!context) {\r\n        throw new Error('connot find todoProvider');\r\n    }\r\n    return context;\r\n}","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst TodoTemplateBlock = styled.div`\r\n    width : 512px;\r\n    height : 768px;\r\n\r\n    position : relative;\r\n    background : white;\r\n    border-radius : 16px;\r\n    box-shadow : 0 0 8px rgba(0, 0, 0, 0.04);\r\n\r\n    margin : 0 auto;\r\n    margin-top : 96px;\r\n    margin-bottom : 32px;\r\n\r\n    display : flex;\r\n    flex-direction : column;\r\n`;\r\n\r\ntype TodoTemplateProps = {\r\n    children? : React.ReactNode;\r\n}\r\n\r\nfunction TodoTemplate( { children } : TodoTemplateProps ) {\r\n    return (\r\n        <TodoTemplateBlock>{children}</TodoTemplateBlock>\r\n    );\r\n};\r\n\r\nexport default TodoTemplate;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { useTodoState } from './storage/TodoStorageContext';\r\nimport Clock from 'react-live-clock';\r\n\r\nconst TodoHeadBlock = styled.div`\r\n    padding : 48px 32px 24px 32px;\r\n    border-bottom : 1px solid #e9ecef;\r\n\r\n    h1 {\r\n        margin: 0;\r\n        font-size: 36px;\r\n        color: #343a40;\r\n    }\r\n\r\n    .day {\r\n        margin-top: 4px;\r\n        color: #868e96;\r\n        font-size: 21px;\r\n    }\r\n\r\n    .task-left {\r\n        color: #20c997;\r\n        font-size: 18px;\r\n        margin-top: 40px;\r\n        font-weight: bold;\r\n    }\r\n`;\r\n\r\nfunction TodoHead( ) {\r\n    const todos = useTodoState();\r\n    const undoneTasks = todos.filter(todo => !todo.done);\r\n\r\n    const today = new Date();\r\n    const dateString = today.toLocaleDateString('ko-KR', {\r\n        year: 'numeric',\r\n        month: 'long',\r\n        day: 'numeric'\r\n    });\r\n\r\n    return (\r\n        <TodoHeadBlock>\r\n            <h1>{dateString}</h1>\r\n            <div className=\"day\">\r\n             {\r\n                 <Clock format={'dddd h:mm:ss a'} ticking={true} timezone={'Asia/Seoul'}></Clock>\r\n             }\r\n            </div>\r\n            <div className=\"task-left\">할 일 {undoneTasks.length}개 남음</div>\r\n        </TodoHeadBlock>\r\n     );\r\n};\r\n\r\nexport default TodoHead;","import React from 'react';\r\n\r\nimport styled, { css } from 'styled-components';\r\nimport { MdDone, MdDelete } from 'react-icons/md';\r\nimport { useTodoDispatch } from './storage/TodoStorageContext';\r\n\r\nconst CheckCircle = styled.div<{ done : boolean }>`\r\n    width: 32px;\r\n    height: 32px;\r\n    border-radius: 16px;\r\n    border: 1px solid #ced4da;\r\n    font-size: 24px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    margin-right: 20px;\r\n    cursor: pointer;\r\n    ${props => \r\n      props.done &&\r\n      css`\r\n        border: 1px solid #38d9a9;\r\n        color: #38d9a9;\r\n    `}\r\n\r\n`;\r\n\r\nconst Text = styled.div<{ done : boolean }>`\r\n    flex: 1;\r\n    font-size: 21px;\r\n    color: #495057;\r\n    ${props => \r\n        props.done &&\r\n        css`\r\n          color: #ced4da;\r\n      `}\r\n`;\r\n\r\nconst Remove = styled.div`\r\n    opacity: 0;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    color: #dee2e6;\r\n    font-size: 24px;\r\n    cursor: pointer;\r\n    &:hover {\r\n        color: #ff6b6b;\r\n    }\r\n`;\r\n\r\n// Selector Remove\r\nconst TodoItemBlock = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    padding-top: 12px;\r\n    padding-bottom: 12px;\r\n    &:hover {\r\n        ${Remove} { \r\n            opacity: 1;\r\n        }\r\n    }\r\n\r\n`;\r\n\r\ntype TodoItemProps = {\r\n    id : number;\r\n    text : string;\r\n    done : boolean;\r\n}\r\n\r\nfunction TodoItem( { id, done, text } : TodoItemProps ) {\r\n    const dispatch = useTodoDispatch();\r\n    const onToggle = () => \r\n        dispatch({\r\n            type: 'TOGGLE',\r\n            id\r\n        });\r\n    const onRemove = () => \r\n        dispatch({\r\n            type: 'REMOVE',\r\n            id\r\n        });\r\n    return (\r\n        <TodoItemBlock>\r\n                <CheckCircle done={done} onClick={onToggle}>\r\n                    {done && <MdDone />}\r\n                </CheckCircle>\r\n                <Text done={done}>{text}</Text>\r\n                <Remove onClick={onRemove}>\r\n                    <MdDelete />\r\n                </Remove>\r\n        </TodoItemBlock>\r\n    );\r\n};\r\n\r\nexport default React.memo(TodoItem);","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport TodoItem from './TodoItem';\r\nimport { useTodoState } from './storage/TodoStorageContext';\r\n\r\nconst TodoListBlock = styled.div`\r\n  flex: 1;\r\n  padding: 20px 32px;\r\n  padding-bottom: 48px;\r\n  overflow-y: auto;\r\n`;\r\n\r\ntype TodoListProps = {\r\n    children? : React.ReactNode;\r\n}\r\n\r\nfunction TodoList( { children } : TodoListProps ) {\r\n    const todos = useTodoState();\r\n\r\n    return (\r\n        <TodoListBlock>\r\n            {\r\n              todos.map( \r\n                todo => <TodoItem \r\n                   key={todo.id}\r\n                   id={todo.id}\r\n                   text={todo.text}\r\n                   done={todo.done}\r\n               />\r\n              )\r\n            }\r\n            \r\n        </TodoListBlock>\r\n     );\r\n};\r\n\r\nexport default TodoList;","import React, { useState } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { MdAdd } from 'react-icons/md';\r\nimport { useTodoNextId, useTodoDispatch } from './storage/TodoStorageContext';\r\n\r\nconst CircleButton = styled.button<{ open : boolean }>`\r\n  background: #38d9a9;\r\n  &:hover {\r\n    background: #63e6be;\r\n  }\r\n  &:active {\r\n    background: #20c997;\r\n  }\r\n\r\n  z-index: 5;\r\n  cursor: pointer;\r\n  width: 80px;\r\n  height: 80px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n\r\n  position: absolute;\r\n  left: 50%;\r\n  bottom: 0;\r\n  transform: translate(-50%, 50%);\r\n\r\n  font-size: 60px;\r\n  color: white;\r\n  border-radius: 40px;\r\n\r\n  border: none;\r\n  outline: none;\r\n\r\n  transition: 0.125s all ease-in;\r\n  ${props => props.open && css`\r\n    background: #ff6b6b;\r\n    &:hover {\r\n        background: #ff8787;\r\n    }\r\n    &:active {\r\n        background: #fa5252;\r\n    }\r\n    transform: translate(-50%, 50%) rotate(45deg);\r\n    \r\n  `}\r\n`;\r\n\r\nconst InsertFormPositioner = styled.div`\r\n    width: 100%;\r\n    bottom: 0;\r\n    left: 0;\r\n    position: absolute;\r\n`;\r\n\r\nconst InsertForm = styled.form`\r\n    background: #f8f9fa;\r\n    padding: 32px;\r\n    padding-bottom: 72px;\r\n    border-bottom-left-radius: 16px;\r\n    border-bottom-right-radius: 16px;\r\n    border-top: 1px solid #e9ecef;\r\n`;\r\n\r\nconst Input = styled.input`\r\n    padding: 12px;\r\n    border-radius: 4px;\r\n    border: 1px solid #dee2e6;\r\n    width: 100%;\r\n    outline: none;\r\n    font-size: 18px;\r\n    box-sizing: border-box;\r\n`;\r\n\r\n\r\ntype TodoCreateProps = {\r\n    children? : React.ReactNode;\r\n}\r\n\r\nfunction TodoCreate( { children } : TodoCreateProps ) {\r\n    const [open, setOpen] = useState<boolean>(false);\r\n    const [value, setValue] = useState<string>('');\r\n    const onToggle = () => setOpen(!open);\r\n    const onChange = (e : React.ChangeEvent<HTMLInputElement>) => setValue(e.target.value);\r\n    const onSubmit = (e : React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault(); // 새로고침을 안하게 하기 위해서 추가\r\n        dispatch({\r\n            type: 'CREATE',\r\n            todo: {\r\n                id: nextId.current,\r\n                text: value,\r\n                done: false\r\n            }\r\n        });\r\n        setValue('');\r\n        setOpen(false);\r\n        nextId.current += 1;\r\n    };\r\n\r\n    const dispatch = useTodoDispatch();\r\n    const nextId = useTodoNextId();\r\n\r\n    return (\r\n        <>\r\n            {open && (\r\n                <InsertFormPositioner>\r\n                    <InsertForm onSubmit={onSubmit}>\r\n                        <Input \r\n                        placeholder=\"할 일을 입력 후, Enter를 누르세요\" \r\n                        autoFocus\r\n                        onChange={onChange}\r\n                        value={value}/>\r\n                    </InsertForm>\r\n                </InsertFormPositioner>\r\n            )}\r\n            <CircleButton onClick={onToggle} open={open}>\r\n                <MdAdd />\r\n            </CircleButton>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default React.memo(TodoCreate);","import React from 'react';\nimport { createGlobalStyle } from 'styled-components';\nimport { TodoProvider } from './components/storage/TodoStorageContext';\nimport TodoTemplate from './components/TodoTemplate';\nimport TodoHead from './components/TodoHead';\nimport TodoList from './components/TodoList';\nimport TodoCreate from './components/TodoCreate';\n\n// css 굳이 추가해서 처리할 필요는 없다.\nconst GlobalStyle = createGlobalStyle`\n  body {\n    background : #e9ecef;\n  }\n`;\n\nfunction App() {\n  return (\n    <TodoProvider>\n      <GlobalStyle />\n      <TodoTemplate>\n        <TodoHead />\n        <TodoList />\n        <TodoCreate/>\n      </TodoTemplate>\n    </TodoProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}